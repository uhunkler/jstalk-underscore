// test (shift ctrl t)
#import 'test/underscore.jstalk'
#import 'test/testlibrary.jstalk'

// Get the actual page
var page = doc.currentPage();
// tests on the page object
// #import 'test/test-page.jstalk'


// Get all first level layers on the page
var layers = page.layers();
// test on the layer object
// #import 'test/test-layers.jstalk'

test.print('\n\nTest layers:');
test.assert(_.size(layers) === 3, 'The layers array contains three items')


// Test the underscore _.size function
test.print('\n\nTest _.size');
test.assert(_.size({one : 1, two : 2, three : 3}) === 3, 'can compute the size of an object');
test.assert(_.size([1, 2, 3]) === 3, 'can compute the size of an array');
test.assert(_.size({length: 3, 0: 0, 1: 0, 2: 0}) === 3, 'can compute the size of Array-likes');

var func = function() {
  return _.size(arguments);
};

test.assert(func(1, 2, 3, 4) === 4, 'can test the size of the arguments object');

test.assert(_.size('hello') === 5, 'can compute the size of a string literal');
test.assert(_.size(new String('hello')) === 5, 'can compute the size of string object');

test.assert(_.size(null) === 0, 'handles nulls');


// Test the underscore _.include function
test.print('\n\nTest _.include');

test.assert(_.include([1,2,3], 2), 'two is in the array');
test.assert(!_.include([1,3,9], 2), 'two is not in the array');
test.assert(_.include({moe:1, larry:3, curly:9}, 3) === true, '_.include on objects checks their values');


// Test the underscore _.each function
test.print('\n\nTest _.each');
_.each([1, 2, 3], function (num, i) {
  test.assert(num === i + 1, num + ': each iterator provides value and iteration count');
});


var answers = [];
_.each([1, 2, 3], function (num) {
    answers.push(num * this.multiplier);
  }, 
  {multiplier: 5}
);
test.assert(answers.join(', ') === '5, 10, 15', 'context object property accessed');


answers = [];
_.each(layers, function (ele) {
    answers.push(ele.className().toString());
});
test.assert(answers.join(', ') === 'MSShapeGroup, MSShapeGroup, MSShapeGroup',
  'each layers element in the loop');


answers = [];
var obj = {one: 1, two: 2, three: 3};
obj.constructor.prototype.four = 4;
_.each(obj, function (value, key) { answers.push(key); });
test.assert(answers.join(', ') === 'one, two, three', 
  'iterating over objects works and ignores the object prototype');
delete obj.constructor.prototype.four;


answer = null;
_.each([1, 2, 3], function (num, index, arr) { if (_.include(arr, num)) answer = true; });
test.assert(answer, 'can reference the original collection from inside the iterator');


answers = 0;
_.each(null, function() { ++answers; });
test.assert(answers === 0, 'handles a null properly');


// Test the underscore _.map function
test.print('\n\nTest _.map');
var doubled = _.map([1, 2, 3], function (num){ return num * 2; });
test.assert(doubled.join(', ') === '2, 4, 6', 'doubled numbers');

var tripled = _.map([1, 2, 3], function (num){ return num * this.multiplier; }, {multiplier : 3});
test.assert(tripled.join(', ') === '3, 6, 9', 'tripled numbers with context');

var ids = _.map({length: 2, 0: {id: '1'}, 1: {id: '2'}}, function (n) {
  return n.id;
});
test.assert(ids.length === ['1', '2'].length &&
  ids[0] === '1' && ids[1] === '2',
  'Can use collection methods on Array-likes.');

answers = [];
_.map(layers, function (ele, i) {
  ele.setName('rect' + i);
  answers.push(ele.name());
});
test.assert(answers.join(', ') === 'rect0, rect1, rect2', '1. map each element of an JSTArray');

answers = [];
_.map(layers, function (ele, i) {
  ele.setName('rect' + (i + 1));
  answers.push(ele.name());
});
test.assert(answers.join(', ') === 'rect1, rect2, rect3', '2. map each element of an JSTArray');


// Test the underscore _.any function
test.print('\n\nTest _.any');
test.assert(!_.any([]), 'the empty set');
test.assert(!_.any([false, false, false]), 'all false values');
test.assert(_.any([false, false, true]), 'one true value');
test.assert(_.any([null, 0, 'yes', false]), 'a string');
test.assert(!_.any([null, 0, '', false]), 'falsy values');
test.assert(!_.any([1, 11, 29], function(num){ return num % 2 == 0; }), 'all odd numbers');
test.assert(_.any([1, 10, 29], function(num){ return num % 2 == 0; }), 'an even number');
test.assert(_.any([1], _.identity) === true, 'cast to boolean - true');
test.assert(_.any([0], _.identity) === false, 'cast to boolean - false');


// Test the underscore _.find function
test.print('\n\nTest _.find');
var array = [1, 2, 3, 4];
test.assert(_.find(array, function(n) { return n > 2; }) === 3, 
  'should return first found `value`');
test.assert(_.find(array, function() { return false; }) === void 0, 
  'should return `undefined` if `value` is not found');

// Set the layer names to rect1, rect2, rect3
// Then find the layer with the name rect2
_.map(layers, function (ele, i) {
  ele.setName('rect' + (i + 1));
});
var lname = 'rect2';
var foundLayer = _.find(layers, function (ele) {
  return ele.name().toString() === lname;
});
test.assert(foundLayer !== undefined && lname === foundLayer.name().toString(), 
  'should return layer with name ' + lname);

// Set the layer names to rect1, rect2, rect3
// Then fail to find the layer with the name rect0
_.map(layers, function (ele, i) {
  ele.setName('rect' + (i + 1));
});
var lname = 'rect0';
var foundLayer = _.find(layers, function (ele) {
  return ele.name().toString() === lname;
});
test.assert(foundLayer === undefined, 'should return `undefined`');


// Test the underscore _.filter function
test.print('\n\nTest _.filter');
var evens = _.filter([1, 2, 3, 4, 5, 6], function (num) { return num % 2 == 0; });
test.assert(evens.join(', ') === '2, 4, 6', 'filtered each even number');

// Set the layer names to rect1, rect2, rect3
// Then filter the layers with the name not equal to rect2
_.map(layers, function (ele, i) {
  ele.setName('rect' + (i + 1));
});
lname = 'rect2';
foundLayers = _.filter(layers, function (ele) {
  return ele.name().toString() !== lname;
});
test.assert(foundLayers !== undefined && _.size(foundLayers) === 2, 
  'should return 2 layers');

// Set the layer names to rect1, rect2, rect3
// Then filter the layers with the name containing square
_.map(layers, function (ele, i) {
  ele.setName('rect' + (i + 1));
});
lname = 'square';
foundLayers = _.filter(layers, function (ele) {
  return ele.name().toString().indexOf(lname) !== -1;
});
test.assert(foundLayers !== undefined, 'should return `undefined`');


// Test the underscore _.reverse function
test.print('\n\nTest _.reverse');
var array = [1, 2, 3, 4];
var r_array = _.reverse(array);
test.assert(r_array.join(', ') === '4, 3, 2, 1',
  'should return the numbers in the reverse order');

// reverse the layer order - a JSTalkArray
var r_layers = _.reverse(layers);
answers = [];
_.each(r_layers, function (ele) {
  answers.push(ele.name());
});
test.assert(answers.join(', ') === 'rect3, rect2, rect1', 
  'should return the elements of an JSTArray in reverse order');


// Output the test results
test.show();
